version: '3'

services:

  mysql:
    container_name: kOkenku-Mysql
    image: mysql:latest
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD= # Set password for the root user
      - MYSQL_DATABASE=kOkenku
      - MYSQL_USER=kOkenkuBackEnd
      - MYSQL_PASSWORD= # Set password for the kOkenkuBackEnd user
      - TZ=Europe/Prague
      - MYSQL_INITDB_SKIP_TZINFO=no
      - MYSQL_LOG_BIN=1
    ports:
      - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql
      - ./initdb:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      timeout: 10s
      retries: 5

  mysql-backup:
    container_name: kOkenku-Mysql-Backup
    image: fradelg/mysql-cron-backup:latest
    restart: always
    environment:
      - MYSQL_HOST=mysql
      - MYSQL_USER=root
      - MYSQL_PASS= # Same as MYSQL_ROOT_PASSWORD
      - MAX_BACKUPS=15
      - INIT_BACKUP=1
      - CRON_TIME= # Set cron schedule for creating backups of the database; Preferable to run while all establishments are closed - The backup process can affect writeability to the database
      - GZIP_LEVEL=9
      - TZ=Europe/Prague
    volumes:
      - ./db_backup:/backup
    depends_on:
      mysql:
        condition: service_healthy

  adminer:
    container_name: kOkenku-Adminer
    image: adminer
    restart: always
    ports:
      - 8001:8080
    depends_on:
      mysql:
        condition: service_healthy

  kokenku-admin:
    container_name: kOkenku-Admin
    build: .
    restart: always
    environment:
      - KO_DB_HOST=mysql
      - KO_DB_NAME=kOkenku
      - KO_DB_USER=kOkenkuBackEnd
      - KO_DB_PASSWORD= # Same as MYSQL_PASSWORD
      - KO_DB_SSL_CA=
      - KO_HASH_SALT= # Set password hashing salt
    ports:
      - "8000:8000"
    command: python3 -m gunicorn -k gevent -w 1 --bind 0.0.0.0:8000 --chdir ./app/web app:app
    volumes:
      - ./app/web/files/storage:/admin/app/web/files/storage
      - ./app/logs:/admin/app/logs
    depends_on:
      mysql:
        condition: service_healthy

volumes:
  mysql-data: